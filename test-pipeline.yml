parameters:
  buildConfig: ''
  archType: ''
  osGroup: '' ## the parameter to build.sh/build-test.sh (Linux/OSX/Windows_NT)

### Test job
jobs:
- template: xplat-job.yml
  parameters:
    buildConfig: ${{ parameters.buildConfig }}
    archType: ${{ parameters.archType }}
    osGroup: ${{ parameters.osGroup }}
    name: ${{ format('testbuild_{0}_{1}_{2}', parameters.osGroup, parameters.archType, parameters.buildConfig) }}
    displayName: ${{ format('Test {0} {1} {2}', parameters.osGroup, parameters.archType, parameters.buildConfig) }}

    # Test job depends on the corresponding build job
    dependsOn: ${{ format('build_{0}_{1}_{2}', parameters.osGroup, parameters.archType, parameters.buildConfig) }}

    steps:

    # Install test build dependencies
    - ${{ if eq(parameters.osGroup, 'Linux') }}:
      - script: sudo apt update && sudo apt install cmake llvm-3.9 clang-3.9 lldb-3.9 liblldb-3.9-dev libunwind8 libunwind8-dev gettext libicu-dev liblttng-ust-dev libcurl4-openssl-dev libssl-dev libkrb5-dev libnuma-dev
        displayName: Install native dependencies
    - ${{ if eq(parameters.osGroup, 'OSX') }}:
      - script: brew install icu4c openssl
        displayName: Install native dependencies
      - script: brew link --force icu4c
        displayName: Set up native dependencies


    # Download product build from pipeline artifact storage
    - ${{ if or(eq(parameters.osGroup, 'Linux'), eq(parameters.osGroup, 'OSX')) }}:
      - task: DownloadPipelineArtifact@0
        displayName: Download product build pipeline artifact
        inputs:
          artifactName: ${{ format('{0}_{1}_{2}_build', parameters.osGroup, parameters.archType, parameters.buildConfig) }}
          targetPath: $(Build.SourcesDirectory)/bin/Product/$(osGroup).$(archType).$(buildConfigUpper)
    - ${{ if eq(parameters.osGroup, 'Windows_NT') }}:
      - task: DownloadPipelineArtifact@0
        displayName: Download product build pipeline artifact
        inputs:
          artifactName: ${{ format('{0}_{1}_{2}_build', parameters.osGroup, parameters.archType, parameters.buildConfig) }}
          targetPath: $(Build.SourcesDirectory)\bin\Product\Windows_NT.$(archType).$(buildConfigUpper)

      
    # Build tests
    - ${{ if or(eq(parameters.osGroup, 'Linux'), eq(parameters.osGroup, 'OSX')) }}:
      - script: ./build-test.sh $(buildConfig) $(archType)
        displayName: Build pri-0 tests
    - ${{ if eq(parameters.osGroup, 'Windows_NT') }}:
        #    - script: build-test.cmd $(buildConfig) $(archType) buildagainstpackages runtimeid win-$(archType) -Priority=0
      - script: build-test.cmd $(buildConfig) $(archType) -Priority=0
        displayName: Build pri-0 tests


    # Prepare tests for helix
    - ${{ if or(eq(parameters.osGroup, 'Linux'), eq(parameters.osGroup, 'OSX')) }}:
      - script: ./Tools/dotnetcli/dotnet msbuild tests/helixprep.proj /p:CORE_ROOT=$(Build.SourcesDirectory)/bin/tests/$(osGroup).$(archType).$(buildConfigUpper)/Tests/Core_Root /p:__BuildType=$(buildConfig) /p:__BuildArch=$(archType)
        displayName: Prepare tests for helix
    - ${{ if eq(parameters.osGroup, 'Windows_NT') }}:
      - script: .\Tools\dotnetcli\dotnet.exe msbuild tests\helixprep.proj /p:CORE_ROOT=$(Build.SourcesDirectory)\bin\tests\Windows_NT.$(archType).$(buildConfigUpper)\tests\core_root /p:__BuildType=$(buildConfig) /p:__BuildArch=$(archType)
        displayName: Prepare tests for helix


    # Send tests to helix
    - task: DotNetCoreCLI@2
      inputs:
        command: custom
        projects: tests/helixpublishwitharcade.proj # this may work on windows...
        custom: msbuild
        # TODO: remove UsePython argument once we've removed generated wrappers in helixprep.proj
        arguments: '/t:test /p:UsePython=true'
      displayName: Send tests job to Helix
      env:
        ${{ if eq(variables['System.TeamProject'], 'internal') }}:
          # Access token variable for internal project
          HelixAccessToken: $(HelixApiAccessToken)
        ${{ if eq(variables['System.TeamProject'], 'public') }}:
          # Access token variable for public project
          HelixAccessToken: $(BotAccount-dotnet-github-anon-kaonashi-bot-helix-token)
