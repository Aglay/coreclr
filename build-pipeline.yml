parameters:
  buildConfig: ''
  archType: ''
  osGroup: '' ## the parameter to build.sh/build-test.sh (Linux/OSX/Windows_NT)

### Product build
jobs:
- template: xplat-job.yml
  parameters:
    buildConfig: ${{ parameters.buildConfig }}
    archType: ${{ parameters.archType }}
    osGroup: ${{ parameters.osGroup }}
    name: ${{ format('build_{0}_{1}_{2}', parameters.osGroup, parameters.archType, parameters.buildConfig) }}
    displayName: ${{ format('Build {0} {1} {2}', parameters.osGroup, parameters.archType, parameters.buildConfig) }}

    steps:

    # Install native dependencies
    - ${{ if eq(parameters.osGroup, 'Linux') }}:
      - script: sudo apt install cmake llvm-3.9 clang-3.9 lldb-3.9 liblldb-3.9-dev libunwind8 libunwind8-dev gettext libicu-dev liblttng-ust-dev libcurl4-openssl-dev libssl-dev libkrb5-dev libnuma-dev
        displayName: Install native dependencies
    - ${{ if eq(parameters.osGroup, 'OSX') }}:
      - script: brew install icu4c openssl
        displayName: Install native dependencies
      - script: brew link --force icu4c
        displayName: Set up native dependencies
    - ${{ if eq(parameters.osGroup, 'Windows_NT') }}:
      # This installs python
      - script: eng\common\init-tools-native.cmd -InstallDirectory $(Build.SourcesDirectory)\native-tools -Force
        displayName: Install native tools


    # Run init-tools (pre-arcade dependency bootstrapping)
    - ${{ if or(eq(parameters.osGroup, 'Linux'), eq(parameters.osGroup, 'OSX')) }}:
      - script: ./init-tools.sh
        displayName: Init tools
    - ${{ if eq(parameters.osGroup, 'Windows_NT') }}:
      - script: .\init-tools.cmd
        displayName: Init tools


    # Sync
    - ${{ if or(eq(parameters.osGroup, 'Linux'), eq(parameters.osGroup, 'OSX')) }}:
      - script: ./Tools/dotnetcli/dotnet msbuild build.proj /p:RestoreDuringBuild=true /t:Sync
        displayName: Sync
    - ${{ if eq(parameters.osGroup, 'Windows_NT') }}:
      - script: .\Tools\dotnetcli\dotnet.exe msbuild build.proj /p:RestoreDuringBuild=true /t:Sync
        displayName: Sync


    # Build
    - ${{ if or(eq(parameters.osGroup, 'Linux'), eq(parameters.osGroup, 'OSX')) }}:
      - script: ./build.sh $(buildConfig) $(archType) -skipnuget -skiprestore
        displayName: Build
    - ${{ if eq(parameters.osGroup, 'Windows_NT') }}:
      - script: set __TestIntermediateDir=int&&build.cmd $(buildConfig) $(archType) -skiptests -skipbuildpackages -skiprestore -priority=0
        displayName: Build


    # Upload build as pipeline artifact
    - ${{ if or(eq(parameters.osGroup, 'Linux'), eq(parameters.osGroup, 'OSX')) }}:
      - task: PublishPipelineArtifact@0
        displayName: Save product build as pipeline artifact
        inputs:
          artifactName: ${{ format('{0}_{1}_{2}_build', parameters.osGroup, parameters.archType, parameters.buildConfig) }}
          targetPath: $(Build.SourcesDirectory)/bin/Product/$(osGroup).$(archType).$(buildConfigUpper)
    - ${{ if eq(parameters.osGroup, 'Windows_NT') }}:
      - task: PublishPipelineArtifact@0
        displayName: Save product build as pipeline artifact
        inputs:
          artifactName: ${{ format('{0}_{1}_{2}_build', parameters.osGroup, parameters.archType, parameters.buildConfig) }}
          targetPath: $(Build.SourcesDirectory)\bin\Product\Windows_NT.$(archType).$(buildConfigUpper)


    - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
      - script: echo Sign!
        displayName: Sign Binaries (empty for now)


    # Get key vault secrets for publishing
    - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
      - task: AzureKeyVault@1
        inputs:
          azureSubscription: 'DotNet-Engineering-Services_KeyVault'
          KeyVaultName: EngKeyVault
          SecretsFilter: 'dotnetfeed-storage-access-key-1,microsoft-symbol-server-pat,symweb-symbol-server-pat'

    #
    # Publish official build
    #
    - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
        # TODO: generate version assets?
        # TODO: log native version assets?
        # TODO: upload package to myget? <--- assume we're not doing this any more
        #- script: eng\common\msbuild.cmd src\publish.proj
        #    /t:PublishPackages
        #    /p:__PublishPackages=true
        #
        #    # PB_BuildOutputManifestArguments
        #    /p:ManifestId=$(OfficialBuildId)
        #    /p:ManifestBranch=$(SourceBranch)
        #    /p:ManifestCommit=$(SourceVersion)
        #
        #    /p:ExpectedFeedUrl=
        #    /p:CloudDropAccessToken=blobfeedkey
        #    /p:CloudDropAccountName=azureblobfeedaccountname
        #    /p:ContainerName=blobfeedcontainername
        #    /p:OverwriteOnPublish=true
        #    /p:PackagesPatternDir=packagedirectory
        #    /p:__BuildType=$(buildConfig)
        #    /p:OfficialPublish=true
        #    /p:PublishFlatContainer=false
        - script: eng\common\msbuild.cmd src\publish.proj
              /p:__PublishPackages=true
              /p:ContainerName=container1
              /p:CloudDropAccountName=svbomerstorageaccount1
              /p:CloudDropAccessToken=
              /p:PublishFlatContainer=false
          displayName: Upload product build to blob feed
        # TODO: upload package to vsts? <--- assume we're not doing this any more
        # TODO: update versions repository? <--- assume we're not doing this any more
    

    # Kill tasks that hold onto files on Windows. Otherwise git clean
    # may fail for later jobs on the same agent.
    - ${{ if eq(parameters.osGroup, 'Windows_NT') }}:
      - script: cleanup.cmd
        displayName: Kill tasks that hold on to files
        condition: always()


    # TODO: also enable publishing symbols to msdl, symweb
#    - script: eng\common\cibuild.cmd /p:DotNetPublishToBlobFeed=true /p:DotNetPublishBlobFeedKey=$(dotnetfeed-storage-access-key-1) /p:DotNetPublishBlobFeedUrl=https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json
    #- script: .\Tools\dotnetcli\dotnet.exe msbuild 
    #  displayName: Publish build to some location (empty for now)
