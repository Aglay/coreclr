# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# pool:
#  vmImage: 'Ubuntu 16.04'

# phases:
# - script: echo Hello, world!
#   displayName: 'Run a one-line script'
# 
# - script: |
#     echo Add other tasks to build, test, and deploy your project.
#     echo See https://aka.ms/yaml
#   displayName: 'Run a multi-line script'

name: testpipeline
# resources:
#   containers:
#   repositories:

jobs:        
# - job: job1
#   displayName: job1UIName
#   dependsOn:
#   condition:
#   steps:
#   - bash: echo hi from job1
# - job: job2matrix
#   strategy:
#     matrix:
#       { matrix1:
#         { var1: inmatrix1,
#           var2: alsoinmatrix1 },
#         matrix2:
#         { var1: inmatrix2,
#           var2: alsoinmatrix2 }
#       }
#   steps:
#   - bash: echo var1 ${VAR1}, var2 ${VAR2}
# - job: job2matrixyamlsyntax
#   strategy:
#     matrix:
#       matrix1:
#         var1: inmatrix1
#         var2: alsoinmatrix1
#       matrix2:
#         var1: inmatrix2
#         var2: alsoinmatrix2
#   steps:
#   - bash: echo var1 $VAR1, var2 $VAR2
# - job: job2parallel
#   strategy:
#     parallel: 4

# - template: outermatrixtemplate.yml
#   parameters:
#     os_combos: { linux, windows }
#     arch_combos: { x64, x86 }
#     config_combos: { debug, release }
#     testleg_combos: { stress, normal }

- template: nestedmatrixtemplate.yml
  parameters:
    os: linux
    arch: x64
    config: debug
    testleg: stress

- template: template.yml
  parameters:
    name: instantiatedTemplateName
- job: withsteptemplate
  steps:
  - template: steptemplate.yml
    parameters:
      myParam: instantiatedStepTemplateName