# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# pool:
#  vmImage: 'Ubuntu 16.04'

# phases:
# - script: echo Hello, world!
#   displayName: 'Run a one-line script'
# 
# - script: |
#     echo Add other tasks to build, test, and deploy your project.
#     echo See https://aka.ms/yaml
#   displayName: 'Run a multi-line script'

name: testpipeline
# resources:
#   containers:
#   repositories:

variables:
  testlegsoutervar: 'innerloop,outerloop'
  testvar: 'avariable'


jobs:
#- job: testvariablejob
#  displayName: testvariableDisplayName
#  steps:
#    # this works! but not in display name...? what about in parameters?
#  - script: 'echo in test job. variable: $(testvar). testlegs: $(testlegsoutervar)'
# - job: job1
#   displayName: job1UIName
#   dependsOn:
#   condition:
#   steps:
#   - bash: echo hi from job1
# - job: job2matrix
#   strategy:
#     matrix:
#       { matrix1:
#         { var1: inmatrix1,
#           var2: alsoinmatrix1 },
#         matrix2:
#         { var1: inmatrix2,
#           var2: alsoinmatrix2 }
#       }
#   steps:
#   - bash: echo var1 ${VAR1}, var2 ${VAR2}
# - job: job2matrixyamlsyntax
#   strategy:
#     matrix:
#       matrix1:
#         var1: inmatrix1
#         var2: alsoinmatrix1
#       matrix2:
#         var1: inmatrix2
#         var2: alsoinmatrix2
#   steps:
#   - bash: echo var1 $VAR1, var2 $VAR2
# - job: job2parallel
#   strategy:
#     parallel: 4

# - template: outermatrixtemplate.yml
#   parameters:
#     os_combos: { linux, windows }
#     arch_combos: { x64, x86 }
#     config_combos: { debug, release }
#     testleg_combos: { stress, normal }

#- template: nestedmatrixtemplate.yml
#  parameters:
#    os: linux
#    arch: x64
#    config: debug
#    testleg: stress
#
#- template: template.yml
#  parameters:
#    name: instantiatedTemplateName
#- job: withsteptemplate
#  steps:
#  - template: steptemplate.yml
#    parameters:
#      myParam: instantiatedStepTemplateName


# test matrix


####  - job: Window_NT
####    pool:
####      name: dotnet-external-temp
####    strategy:
####      matrix:
####        x64 debug innerloop:
####          arch: x64
####          config: debug
####          testleg: innerloop
####        x64 checked innerloop:
####          arch: x64
####          config: checked
####          testleg: innerloop
####        x64 release innerloop:
####          arch: x64
####          config: release
####          testleg: innerloop
####        x64 debug outerloop:
####          arch: x64
####          config: debug
####          testleg: outerloop
####        x64 checked outerloop:
####          arch: x64
####          config: checked
####          testleg: outerloop
####        x64 release outerloop:
####          arch: x64
####          config: release
####          testleg: outerloop
####        x64 debug R2R:
####          arch: x64
####          config: debug
####          testleg: R2R
####        x64 checked R2R:
####          arch: x64
####          config: checked
####          testleg: R2R
####        x64 release R2R:
####          arch: x64
####          config: release
####          testleg: R2R
####        x64 debug GCStress:
####          arch: x64
####          config: debug
####          testleg: GCStress
####        x64 checked GCStress:
####          arch: x64
####          config: checked
####          testleg: GCStress
####        x64 release GCStress:
####          arch: x64
####          config: release
####          testleg: GCStress
####        x86 debug innerloop:
####          arch: x86
####          config: debug
####          testleg: innerloop
####        x86 checked innerloop:
####          arch: x86
####          config: checked
####          testleg: innerloop
####        x86 release innerloop:
####          arch: x86
####          config: release
####          testleg: innerloop
####        x86 debug outerloop:
####          arch: x86
####          config: debug
####          testleg: outerloop
####        x86 checked outerloop:
####          arch: x86
####          config: checked
####          testleg: outerloop
####        x86 release outerloop:
####          arch: x86
####          config: release
####          testleg: outerloop
####        x86 debug R2R:
####          arch: x86
####          config: debug
####          testleg: R2R
####        x86 checked R2R:
####          arch: x86
####          config: checked
####          testleg: R2R
####        x86 release R2R:
####          arch: x86
####          config: release
####          testleg: R2R
####        x86 debug GCStress:
####          arch: x86
####          config: debug
####          testleg: GCStress
####        x86 checked GCStress:
####          arch: x86
####          config: checked
####          testleg: GCStress
####        x86 release GCStress:
####          arch: x86
####          config: release
####          testleg: GCStress
####    steps:
####      - script: echo %ARCH% %CONFIG% %TESTLEG%
####  
####  - job: Ubuntu1604
####    pool:
####      name: Hosted Ubuntu 1604
####    strategy:
####      matrix:
####        x64 debug innerloop:
####          arch: x64
####          config: debug
####          testleg: innerloop
####        x64 checked innerloop:
####          arch: x64
####          config: checked
####          testleg: innerloop
####        x64 release innerloop:
####          arch: x64
####          config: release
####          testleg: innerloop
####        x64 debug outerloop:
####          arch: x64
####          config: debug
####          testleg: outerloop
####        x64 checked outerloop:
####          arch: x64
####          config: checked
####          testleg: outerloop
####        x64 release outerloop:
####          arch: x64
####          config: release
####          testleg: outerloop
####        x64 debug R2R:
####          arch: x64
####          config: debug
####          testleg: R2R
####        x64 checked R2R:
####          arch: x64
####          config: checked
####          testleg: R2R
####        x64 release R2R:
####          arch: x64
####          config: release
####          testleg: R2R
####        x64 debug GCStress:
####          arch: x64
####          config: debug
####          testleg: GCStress
####        x64 checked GCStress:
####          arch: x64
####          config: checked
####          testleg: GCStress
####        x64 release GCStress:
####          arch: x64
####          config: release
####          testleg: GCStress
####        x86 debug innerloop:
####          arch: x86
####          config: debug
####          testleg: innerloop
####        x86 checked innerloop:
####          arch: x86
####          config: checked
####          testleg: innerloop
####        x86 release innerloop:
####          arch: x86
####          config: release
####          testleg: innerloop
####        x86 debug outerloop:
####          arch: x86
####          config: debug
####          testleg: outerloop
####        x86 checked outerloop:
####          arch: x86
####          config: checked
####          testleg: outerloop
####        x86 release outerloop:
####          arch: x86
####          config: release
####          testleg: outerloop
####        x86 debug R2R:
####          arch: x86
####          config: debug
####          testleg: R2R
####        x86 checked R2R:
####          arch: x86
####          config: checked
####          testleg: R2R
####        x86 release R2R:
####          arch: x86
####          config: release
####          testleg: R2R
####        x86 debug GCStress:
####          arch: x86
####          config: debug
####          testleg: GCStress
####        x86 checked GCStress:
####          arch: x86
####          config: checked
####          testleg: GCStress
####        x86 release GCStress:
####          arch: x86
####          config: release
####          testleg: GCStress
####    steps:
####      - script: echo $ARCH $CONFIG $TESTLEG
####  
####  
####  - job: MacOS
####    pool:
####      name: Hosted macOS
####    strategy:
####      matrix:
####        x64 debug innerloop:
####          arch: x64
####          config: debug
####          testleg: innerloop
####        x64 checked innerloop:
####          arch: x64
####          config: checked
####          testleg: innerloop
####        x64 release innerloop:
####          arch: x64
####          config: release
####          testleg: innerloop
####        x64 debug outerloop:
####          arch: x64
####          config: debug
####          testleg: outerloop
####        x64 checked outerloop:
####          arch: x64
####          config: checked
####          testleg: outerloop
####        x64 release outerloop:
####          arch: x64
####          config: release
####          testleg: outerloop
####        x64 debug R2R:
####          arch: x64
####          config: debug
####          testleg: R2R
####        x64 checked R2R:
####          arch: x64
####          config: checked
####          testleg: R2R
####        x64 release R2R:
####          arch: x64
####          config: release
####          testleg: R2R
####        x64 debug GCStress:
####          arch: x64
####          config: debug
####          testleg: GCStress
####        x64 checked GCStress:
####          arch: x64
####          config: checked
####          testleg: GCStress
####        x64 release GCStress:
####          arch: x64
####          config: release
####          testleg: GCStress
####    steps:
####      - script: echo $ARCH $CONFIG $TESTLEG

# new test matrix, with conditional testleg runs

# test conditional job

# - job: testconditional
#   condition: eq(variables.runconditionaljob, true)
#   steps:
#   - script: echo running conditional job!
#   
# variables:
#   runconditionaljob: true

#- template: matrix.yml
#  parameters:
#    testlegsparam: $(testlegsoutervar)

# - job: 
# 
# - job: macos.yml
#   parameters:
#     arch: x64
#     config: debug
#     testleg: innerloop
#   condition: eq(variables
#

# I guess that the conditions are evaluated statically on the serer, not on the agent when the job is queued.
# so because the variables are dynamic but the expressions are static, contains evaluates to false statically.

# using template parameters, we can get around this, as long as the template inputs are known statically.
# so there's no way to dynamically change which jobs gets included. maybe that's fine.

- ${{ if contains(variables.testlegsoutervar, 'innerloop') }}:
  - job: innerloop
    steps:
    - script: echo innerloop!
- ${{ if contains(variables.testlegsoutervar, 'outerloop') }}:
  - job: outerloop
    steps:
    - script: echo outerloop!
- ${{ if contains(variables.testlegsoutervar, 'gcstress') }}:
  - job: gcstress
    steps:
    - script: echo gcstress!
#- ${{ if true }}:
#  - job: truejob
#    steps:
#    - script: echo this job should run!


- job: jobA
  steps:
  - bash: pwd
  - bash: "echo sourcesdir: $BUILD_SOURCESDIRECTORY, systemwd: $SYSTEM_DEFAULTWORKINGDIRECTORY, agentwf: $AGENT_WORKFOLDER"
  - bash: mkdir filedir
  - bash: echo hi > filedir/file.txt
  - bash: ls
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: myPipelineArtifact
      targetPath: filedir
- job: jobB
  dependsOn: jobA
  steps:
  - bash: ls
  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: myPipelineArtifact
      targetPath: filedir
  - bash: cat file.txt
