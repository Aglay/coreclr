parameters:
  buildConfig: ''
  buildConfigUpper: ''
  archType: ''

jobs:
- template: /eng/common/templates/phases/base.yml@arcade
  parameters:
    name: ${{ format('win_{0}_{1}_build', parameters.archType, parameters.buildConfig) }}
    displayName: ${{ format('Windows_NT {0} {1} Build', parameters.archType, parameters.buildConfigUpper) }}
    queue:
      name: dotnet-external-temp
      timeoutInMinutes: 180
      parallel: 4
    agentOs: Windows_NT
    variables:
      buildConfig: ${{ parameters.buildConfig }}
      buildConfigUpper: ${{ parameters.buildConfigUpper }}
      archType: ${{ parameters.archType }}
    steps:
#    - task: DotNetCoreInstaller@0
#      inputs:
#        version: 2.1.400
    # necessary to install python!
    - script: eng\common\init-tools-native.cmd -InstallDirectory $(Build.SourcesDirectory)\native-tools -Force
      displayName: Install native tools
      # TODO: do we want to skiptests? skipbuildpackages? IBCOptimize? EnforcePGO? pass an OfficialBuildId? SkipRestore? signtype? file logging parameters?
    - script: .\init-tools.cmd
      displayName: Init tools
    - script: .\Tools\dotnetcli\dotnet.exe msbuild build.proj /p:RestoreDuringBuild=true /t:Sync
      displayName: Sync
    # skiprestore sets restoreduringbuild to false. that step has been separated out.
    - script: set __TestIntermediateDir=int&&build.cmd $(buildConfig) $(archType) -skiptests -skipbuildpackages -skiprestore -priority=0
      displayName: Build
    - script: echo Sign!
      displayName: Sign Binaries (empty for now)
    - script: .\Tools\dotnetcli\dotnet.exe msbuild 
      displayName: Publish build to some location (empty for now)
#    - script: build-test.cmd $(buildConfig) $(archType) buildagainstpackages runtimeid win-$(archType) -Priority=0
#      displayName: Build tests
    - script: build-test.cmd $(buildConfig) $(archType) -Priority=0
      displayName: Build tests
    - script: .\Tools\dotnetcli\dotnet.exe msbuild tests\helixprep.proj /p:CORE_ROOT=$(Build.SourcesDirectory)\bin\tests\Windows_NT.$(archType).$(buildConfigUpper)\tests\core_root /p:__BuildType=$(buildConfig) /p:__BuildArch=$(archType)
      displayName: Prepare test directories for helix
    - task: DotNetCoreCLI@2
      inputs:
        command: custom
        projects: tests\helixpublishwitharcade.proj
        custom: msbuild
        arguments: '/t:test'
      displayName: Send tests job to Helix
      env:
        HelixAccessToken: $(HelixTestAccessToken)
