resources:
  repositories:
  # shared library repository
  - repository: arcade
    type: github
    endpoint: sbomer
    name: sbomer/arcade
    ref: refs/heads/arcadeChanges

variables:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true


phases:

###
### Linux x64
###

- template: unix-pipeline.yml
  parameters:
    buildConfig: release
    buildConfigUpper: Release
    archType: x64
    osGroup: Linux

###
### macOS x64
###

- template: unix-pipeline.yml
  parameters:
    buildConfig: release
    buildConfigUpper: Release
    archType: x64
    osGroup: OSX

###
### RedHat x64
###

###
###  Windows: x64, x86, arm64, arm
###

- template: windows-pipeline.yml
  parameters:
    buildConfig: release
    buildConfigUpper: Release
    archType: x64

- template: windows-pipeline.yml
  parameters:
    buildConfig: release
    buildConfigUpper: Release
    archType: x86

- template: windows-pipeline.yml
  parameters:
    buildConfig: release
    buildConfigUpper: Release
    archType: arm

- template: windows-pipeline.yml
  parameters:
    buildConfig: release
    buildConfigUpper: Release
    archType: arm64


#
#- phase: Windows_NT_x64 Formatting
#    queue:
#      name: Hosted VS2017
#      steps:
#        - script: 'python -u tests\\scripts\\format.py -c %Agent.WorkingDirectory% -o Windows_NT -a x64'
#
#- template: /eng/ryujit-perf.yml
#  parameters:
#    agentOs: Windows_NT
#    queue:
#      name: Hosted VS2017
#      parallel: 4
#      matrix:
#        x64_release_full_opt_ryujit_perf:
#          scenario: full_opt
#          buildConfig: release
#          archType: x64
#        x64_release_min_opt_ryujit_perf:
#          scenario: min_opt
#          buildconfig: release
#          archType: x64
#        x86_release_full_opt_ryujit_perf:
#          scenario: full_opt
#          buildconfig: release
#          archType: x86
#        x86_release_min_opt_ryujit_perf:
#          scenario: min_opt
#          buildConfig: release
#          archType: x86


#  CentOS7.1 x64 Checked Innerloop Build and Test
#  CentOS7.1 x64 Debug Innerloop Build
#  Linux-musl x64 Debug Build
#  OSX 10.12 x64 Checked InnerLoop Build and Test
#  Tizen armel Corss Checked Innerloop Build and Test
#  Ubuntu arm Cross Checked InnerLoop Build and Test
#  Ubuntu arm64 Cross Debug Innerloop Build
#  Ubuntu x64 Checked Innerloop Build and Test
#  Ubuntu x64 Formatting
#  Windows_NT arm Cross Checked Innerloop Build and Test
#  Windows_NT arm64 Cross Checked Innerloop Build and Test
#  Windows_NT x64 Checked CoreFx tests
#  Windows_NT x64 Release CoreFx tests

#- template: /eng/common/templates/phases/base.yml@arcade
#  parameters:
#    queue:
#      name: Hosted Ubuntu 1604
#      timeoutInMinutes: 180
#      parallel: 1
#    agentOs: Ubuntu
#    name: UbuntuHelix
#    steps:
#      - task: DotNetCoreCLI@2
#        inputs:
#          command: custom
#          projects: helixtest.proj
#          custom: msbuild
#          arguments: '/t:test'
#        displayName: Send test workload to helix
#        env:
#          HelixAccessToken: $(HelixTestAccessToken)
#
#- template: /eng/common/templates/phases/base.yml@arcade
#  parameters:
#    queue:
#      name: dotnet-external-temp
#      timeoutInMinutes: 180
#      parallel: 1
#    agentOs: Windows_NT
#    name: WindowsHelix
#    steps:
#      - task: DotNetCoreCLI@2
#        inputs:
#          command: custom
#          projects: helixtest.proj
#          custom: msbuild
#          arguments: '/t:test'
#        displayName: Send test workload to helix
#        env:
#          HelixAccessToken: $(HelixTestAccessToken)
